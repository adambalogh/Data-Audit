// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpor.proto

#ifndef PROTOBUF_cpor_2eproto__INCLUDED
#define PROTOBUF_cpor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace audit {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cpor_2eproto();
void protobuf_AssignDesc_cpor_2eproto();
void protobuf_ShutdownFile_cpor_2eproto();

class BlockTag;
class FileTag;
class Challenge;

// ===================================================================

class BlockTag : public ::google::protobuf::Message {
 public:
  BlockTag();
  virtual ~BlockTag();

  BlockTag(const BlockTag& from);

  inline BlockTag& operator=(const BlockTag& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockTag& default_instance();

  void Swap(BlockTag* other);

  // implements Message ----------------------------------------------

  inline BlockTag* New() const { return New(NULL); }

  BlockTag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockTag& from);
  void MergeFrom(const BlockTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 index = 1;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // optional bytes sigma = 2;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 2;
  inline const ::std::string& sigma() const;
  inline void set_sigma(const ::std::string& value);
  inline void set_sigma(const char* value);
  inline void set_sigma(const void* value, size_t size);
  inline ::std::string* mutable_sigma();
  inline ::std::string* release_sigma();
  inline void set_allocated_sigma(::std::string* sigma);

  // @@protoc_insertion_point(class_scope:audit.BlockTag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::internal::ArenaStringPtr sigma_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cpor_2eproto();
  friend void protobuf_AssignDesc_cpor_2eproto();
  friend void protobuf_ShutdownFile_cpor_2eproto();

  void InitAsDefaultInstance();
  static BlockTag* default_instance_;
};
// -------------------------------------------------------------------

class FileTag : public ::google::protobuf::Message {
 public:
  FileTag();
  virtual ~FileTag();

  FileTag(const FileTag& from);

  inline FileTag& operator=(const FileTag& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileTag& default_instance();

  void Swap(FileTag* other);

  // implements Message ----------------------------------------------

  inline FileTag* New() const { return New(NULL); }

  FileTag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileTag& from);
  void MergeFrom(const FileTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 num_blocks = 1;
  inline void clear_num_blocks();
  static const int kNumBlocksFieldNumber = 1;
  inline ::google::protobuf::uint64 num_blocks() const;
  inline void set_num_blocks(::google::protobuf::uint64 value);

  // optional uint64 num_sectors = 2;
  inline void clear_num_sectors();
  static const int kNumSectorsFieldNumber = 2;
  inline ::google::protobuf::uint64 num_sectors() const;
  inline void set_num_sectors(::google::protobuf::uint64 value);

  // optional int32 sector_size = 3;
  inline void clear_sector_size();
  static const int kSectorSizeFieldNumber = 3;
  inline ::google::protobuf::int32 sector_size() const;
  inline void set_sector_size(::google::protobuf::int32 value);

  // optional bytes alphas = 4;
  inline void clear_alphas();
  static const int kAlphasFieldNumber = 4;
  inline const ::std::string& alphas() const;
  inline void set_alphas(const ::std::string& value);
  inline void set_alphas(const char* value);
  inline void set_alphas(const void* value, size_t size);
  inline ::std::string* mutable_alphas();
  inline ::std::string* release_alphas();
  inline void set_allocated_alphas(::std::string* alphas);

  // optional bytes hmac_code = 5;
  inline void clear_hmac_code();
  static const int kHmacCodeFieldNumber = 5;
  inline const ::std::string& hmac_code() const;
  inline void set_hmac_code(const ::std::string& value);
  inline void set_hmac_code(const char* value);
  inline void set_hmac_code(const void* value, size_t size);
  inline ::std::string* mutable_hmac_code();
  inline ::std::string* release_hmac_code();
  inline void set_allocated_hmac_code(::std::string* hmac_code);

  // optional bytes prf_key = 6;
  inline void clear_prf_key();
  static const int kPrfKeyFieldNumber = 6;
  inline const ::std::string& prf_key() const;
  inline void set_prf_key(const ::std::string& value);
  inline void set_prf_key(const char* value);
  inline void set_prf_key(const void* value, size_t size);
  inline ::std::string* mutable_prf_key();
  inline ::std::string* release_prf_key();
  inline void set_allocated_prf_key(::std::string* prf_key);

  // @@protoc_insertion_point(class_scope:audit.FileTag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 num_blocks_;
  ::google::protobuf::uint64 num_sectors_;
  ::google::protobuf::internal::ArenaStringPtr alphas_;
  ::google::protobuf::internal::ArenaStringPtr hmac_code_;
  ::google::protobuf::internal::ArenaStringPtr prf_key_;
  ::google::protobuf::int32 sector_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cpor_2eproto();
  friend void protobuf_AssignDesc_cpor_2eproto();
  friend void protobuf_ShutdownFile_cpor_2eproto();

  void InitAsDefaultInstance();
  static FileTag* default_instance_;
};
// -------------------------------------------------------------------

class Challenge : public ::google::protobuf::Message {
 public:
  Challenge();
  virtual ~Challenge();

  Challenge(const Challenge& from);

  inline Challenge& operator=(const Challenge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Challenge& default_instance();

  void Swap(Challenge* other);

  // implements Message ----------------------------------------------

  inline Challenge* New() const { return New(NULL); }

  Challenge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Challenge& from);
  void MergeFrom(const Challenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Challenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 index = 1;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // optional bytes weight = 2;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline const ::std::string& weight() const;
  inline void set_weight(const ::std::string& value);
  inline void set_weight(const char* value);
  inline void set_weight(const void* value, size_t size);
  inline ::std::string* mutable_weight();
  inline ::std::string* release_weight();
  inline void set_allocated_weight(::std::string* weight);

  // @@protoc_insertion_point(class_scope:audit.Challenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::internal::ArenaStringPtr weight_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cpor_2eproto();
  friend void protobuf_AssignDesc_cpor_2eproto();
  friend void protobuf_ShutdownFile_cpor_2eproto();

  void InitAsDefaultInstance();
  static Challenge* default_instance_;
};
// ===================================================================


// ===================================================================

// BlockTag

// optional uint64 index = 1;
inline void BlockTag::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockTag::index() const {
  // @@protoc_insertion_point(field_get:audit.BlockTag.index)
  return index_;
}
inline void BlockTag::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:audit.BlockTag.index)
}

// optional bytes sigma = 2;
inline void BlockTag::clear_sigma() {
  sigma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockTag::sigma() const {
  // @@protoc_insertion_point(field_get:audit.BlockTag.sigma)
  return sigma_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockTag::set_sigma(const ::std::string& value) {
  
  sigma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audit.BlockTag.sigma)
}
inline void BlockTag::set_sigma(const char* value) {
  
  sigma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audit.BlockTag.sigma)
}
inline void BlockTag::set_sigma(const void* value, size_t size) {
  
  sigma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audit.BlockTag.sigma)
}
inline ::std::string* BlockTag::mutable_sigma() {
  
  // @@protoc_insertion_point(field_mutable:audit.BlockTag.sigma)
  return sigma_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockTag::release_sigma() {
  
  return sigma_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockTag::set_allocated_sigma(::std::string* sigma) {
  if (sigma != NULL) {
    
  } else {
    
  }
  sigma_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sigma);
  // @@protoc_insertion_point(field_set_allocated:audit.BlockTag.sigma)
}

// -------------------------------------------------------------------

// FileTag

// optional uint64 num_blocks = 1;
inline void FileTag::clear_num_blocks() {
  num_blocks_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FileTag::num_blocks() const {
  // @@protoc_insertion_point(field_get:audit.FileTag.num_blocks)
  return num_blocks_;
}
inline void FileTag::set_num_blocks(::google::protobuf::uint64 value) {
  
  num_blocks_ = value;
  // @@protoc_insertion_point(field_set:audit.FileTag.num_blocks)
}

// optional uint64 num_sectors = 2;
inline void FileTag::clear_num_sectors() {
  num_sectors_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FileTag::num_sectors() const {
  // @@protoc_insertion_point(field_get:audit.FileTag.num_sectors)
  return num_sectors_;
}
inline void FileTag::set_num_sectors(::google::protobuf::uint64 value) {
  
  num_sectors_ = value;
  // @@protoc_insertion_point(field_set:audit.FileTag.num_sectors)
}

// optional int32 sector_size = 3;
inline void FileTag::clear_sector_size() {
  sector_size_ = 0;
}
inline ::google::protobuf::int32 FileTag::sector_size() const {
  // @@protoc_insertion_point(field_get:audit.FileTag.sector_size)
  return sector_size_;
}
inline void FileTag::set_sector_size(::google::protobuf::int32 value) {
  
  sector_size_ = value;
  // @@protoc_insertion_point(field_set:audit.FileTag.sector_size)
}

// optional bytes alphas = 4;
inline void FileTag::clear_alphas() {
  alphas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileTag::alphas() const {
  // @@protoc_insertion_point(field_get:audit.FileTag.alphas)
  return alphas_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTag::set_alphas(const ::std::string& value) {
  
  alphas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audit.FileTag.alphas)
}
inline void FileTag::set_alphas(const char* value) {
  
  alphas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audit.FileTag.alphas)
}
inline void FileTag::set_alphas(const void* value, size_t size) {
  
  alphas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audit.FileTag.alphas)
}
inline ::std::string* FileTag::mutable_alphas() {
  
  // @@protoc_insertion_point(field_mutable:audit.FileTag.alphas)
  return alphas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileTag::release_alphas() {
  
  return alphas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTag::set_allocated_alphas(::std::string* alphas) {
  if (alphas != NULL) {
    
  } else {
    
  }
  alphas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alphas);
  // @@protoc_insertion_point(field_set_allocated:audit.FileTag.alphas)
}

// optional bytes hmac_code = 5;
inline void FileTag::clear_hmac_code() {
  hmac_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileTag::hmac_code() const {
  // @@protoc_insertion_point(field_get:audit.FileTag.hmac_code)
  return hmac_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTag::set_hmac_code(const ::std::string& value) {
  
  hmac_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audit.FileTag.hmac_code)
}
inline void FileTag::set_hmac_code(const char* value) {
  
  hmac_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audit.FileTag.hmac_code)
}
inline void FileTag::set_hmac_code(const void* value, size_t size) {
  
  hmac_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audit.FileTag.hmac_code)
}
inline ::std::string* FileTag::mutable_hmac_code() {
  
  // @@protoc_insertion_point(field_mutable:audit.FileTag.hmac_code)
  return hmac_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileTag::release_hmac_code() {
  
  return hmac_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTag::set_allocated_hmac_code(::std::string* hmac_code) {
  if (hmac_code != NULL) {
    
  } else {
    
  }
  hmac_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmac_code);
  // @@protoc_insertion_point(field_set_allocated:audit.FileTag.hmac_code)
}

// optional bytes prf_key = 6;
inline void FileTag::clear_prf_key() {
  prf_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileTag::prf_key() const {
  // @@protoc_insertion_point(field_get:audit.FileTag.prf_key)
  return prf_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTag::set_prf_key(const ::std::string& value) {
  
  prf_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audit.FileTag.prf_key)
}
inline void FileTag::set_prf_key(const char* value) {
  
  prf_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audit.FileTag.prf_key)
}
inline void FileTag::set_prf_key(const void* value, size_t size) {
  
  prf_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audit.FileTag.prf_key)
}
inline ::std::string* FileTag::mutable_prf_key() {
  
  // @@protoc_insertion_point(field_mutable:audit.FileTag.prf_key)
  return prf_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileTag::release_prf_key() {
  
  return prf_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTag::set_allocated_prf_key(::std::string* prf_key) {
  if (prf_key != NULL) {
    
  } else {
    
  }
  prf_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prf_key);
  // @@protoc_insertion_point(field_set_allocated:audit.FileTag.prf_key)
}

// -------------------------------------------------------------------

// Challenge

// optional int64 index = 1;
inline void Challenge::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Challenge::index() const {
  // @@protoc_insertion_point(field_get:audit.Challenge.index)
  return index_;
}
inline void Challenge::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:audit.Challenge.index)
}

// optional bytes weight = 2;
inline void Challenge::clear_weight() {
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Challenge::weight() const {
  // @@protoc_insertion_point(field_get:audit.Challenge.weight)
  return weight_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Challenge::set_weight(const ::std::string& value) {
  
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audit.Challenge.weight)
}
inline void Challenge::set_weight(const char* value) {
  
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audit.Challenge.weight)
}
inline void Challenge::set_weight(const void* value, size_t size) {
  
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audit.Challenge.weight)
}
inline ::std::string* Challenge::mutable_weight() {
  
  // @@protoc_insertion_point(field_mutable:audit.Challenge.weight)
  return weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Challenge::release_weight() {
  
  return weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Challenge::set_allocated_weight(::std::string* weight) {
  if (weight != NULL) {
    
  } else {
    
  }
  weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight);
  // @@protoc_insertion_point(field_set_allocated:audit.Challenge.weight)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audit

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cpor_2eproto__INCLUDED
