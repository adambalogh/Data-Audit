// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cpor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace audit {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* BlockTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Challenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proof_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cpor_2eproto() {
  protobuf_AddDesc_cpor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cpor.proto");
  GOOGLE_CHECK(file != NULL);
  BlockTag_descriptor_ = file->message_type(0);
  static const int BlockTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTag, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTag, sigma_),
  };
  BlockTag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockTag_descriptor_,
      BlockTag::default_instance_,
      BlockTag_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockTag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTag, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTag, _is_default_instance_));
  FileTag_descriptor_ = file->message_type(1);
  static const int FileTag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, num_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, num_sectors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, sector_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, alphas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, hmac_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, prf_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, p_),
  };
  FileTag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileTag_descriptor_,
      FileTag::default_instance_,
      FileTag_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileTag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileTag, _is_default_instance_));
  ChallengeItem_descriptor_ = file->message_type(2);
  static const int ChallengeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeItem, weight_),
  };
  ChallengeItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChallengeItem_descriptor_,
      ChallengeItem::default_instance_,
      ChallengeItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChallengeItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeItem, _is_default_instance_));
  Challenge_descriptor_ = file->message_type(3);
  static const int Challenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, items_),
  };
  Challenge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Challenge_descriptor_,
      Challenge::default_instance_,
      Challenge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Challenge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _is_default_instance_));
  Proof_descriptor_ = file->message_type(4);
  static const int Proof_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, mus_),
  };
  Proof_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Proof_descriptor_,
      Proof::default_instance_,
      Proof_offsets_,
      -1,
      -1,
      -1,
      sizeof(Proof),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cpor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockTag_descriptor_, &BlockTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileTag_descriptor_, &FileTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChallengeItem_descriptor_, &ChallengeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Challenge_descriptor_, &Challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Proof_descriptor_, &Proof::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cpor_2eproto() {
  delete BlockTag::default_instance_;
  delete BlockTag_reflection_;
  delete FileTag::default_instance_;
  delete FileTag_reflection_;
  delete ChallengeItem::default_instance_;
  delete ChallengeItem_reflection_;
  delete Challenge::default_instance_;
  delete Challenge_reflection_;
  delete Proof::default_instance_;
  delete Proof_reflection_;
}

void protobuf_AddDesc_cpor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncpor.proto\022\013audit.proto\"(\n\010BlockTag\022\r\n"
    "\005index\030\001 \001(\004\022\r\n\005sigma\030\002 \001(\014\"\206\001\n\007FileTag\022"
    "\022\n\nnum_blocks\030\001 \001(\004\022\023\n\013num_sectors\030\002 \001(\004"
    "\022\023\n\013sector_size\030\003 \001(\005\022\016\n\006alphas\030\004 \003(\014\022\021\n"
    "\thmac_code\030\005 \001(\014\022\017\n\007prf_key\030\006 \001(\014\022\t\n\001p\030\007"
    " \001(\014\".\n\rChallengeItem\022\r\n\005index\030\001 \001(\003\022\016\n\006"
    "weight\030\002 \001(\014\"6\n\tChallenge\022)\n\005items\030\001 \003(\013"
    "2\032.audit.proto.ChallengeItem\"#\n\005Proof\022\r\n"
    "\005sigma\030\001 \001(\014\022\013\n\003mus\030\002 \003(\014b\006proto3", 353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cpor.proto", &protobuf_RegisterTypes);
  BlockTag::default_instance_ = new BlockTag();
  FileTag::default_instance_ = new FileTag();
  ChallengeItem::default_instance_ = new ChallengeItem();
  Challenge::default_instance_ = new Challenge();
  Proof::default_instance_ = new Proof();
  BlockTag::default_instance_->InitAsDefaultInstance();
  FileTag::default_instance_->InitAsDefaultInstance();
  ChallengeItem::default_instance_->InitAsDefaultInstance();
  Challenge::default_instance_->InitAsDefaultInstance();
  Proof::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cpor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cpor_2eproto {
  StaticDescriptorInitializer_cpor_2eproto() {
    protobuf_AddDesc_cpor_2eproto();
  }
} static_descriptor_initializer_cpor_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int BlockTag::kIndexFieldNumber;
const int BlockTag::kSigmaFieldNumber;
#endif  // !_MSC_VER

BlockTag::BlockTag()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:audit.proto.BlockTag)
}

void BlockTag::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockTag::BlockTag(const BlockTag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:audit.proto.BlockTag)
}

void BlockTag::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  sigma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BlockTag::~BlockTag() {
  // @@protoc_insertion_point(destructor:audit.proto.BlockTag)
  SharedDtor();
}

void BlockTag::SharedDtor() {
  sigma_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BlockTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockTag_descriptor_;
}

const BlockTag& BlockTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cpor_2eproto();
  return *default_instance_;
}

BlockTag* BlockTag::default_instance_ = NULL;

BlockTag* BlockTag::New(::google::protobuf::Arena* arena) const {
  BlockTag* n = new BlockTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockTag::Clear() {
  index_ = GOOGLE_ULONGLONG(0);
  sigma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BlockTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audit.proto.BlockTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sigma;
        break;
      }

      // optional bytes sigma = 2;
      case 2: {
        if (tag == 18) {
         parse_sigma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sigma()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audit.proto.BlockTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audit.proto.BlockTag)
  return false;
#undef DO_
}

void BlockTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audit.proto.BlockTag)
  // optional uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional bytes sigma = 2;
  if (this->sigma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sigma(), output);
  }

  // @@protoc_insertion_point(serialize_end:audit.proto.BlockTag)
}

::google::protobuf::uint8* BlockTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:audit.proto.BlockTag)
  // optional uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional bytes sigma = 2;
  if (this->sigma().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sigma(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:audit.proto.BlockTag)
  return target;
}

int BlockTag::ByteSize() const {
  int total_size = 0;

  // optional uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // optional bytes sigma = 2;
  if (this->sigma().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sigma());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockTag::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlockTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockTag::MergeFrom(const BlockTag& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.sigma().size() > 0) {

    sigma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sigma_);
  }
}

void BlockTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockTag::CopyFrom(const BlockTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTag::IsInitialized() const {

  return true;
}

void BlockTag::Swap(BlockTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockTag::InternalSwap(BlockTag* other) {
  std::swap(index_, other->index_);
  sigma_.Swap(&other->sigma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockTag_descriptor_;
  metadata.reflection = BlockTag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileTag::kNumBlocksFieldNumber;
const int FileTag::kNumSectorsFieldNumber;
const int FileTag::kSectorSizeFieldNumber;
const int FileTag::kAlphasFieldNumber;
const int FileTag::kHmacCodeFieldNumber;
const int FileTag::kPrfKeyFieldNumber;
const int FileTag::kPFieldNumber;
#endif  // !_MSC_VER

FileTag::FileTag()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:audit.proto.FileTag)
}

void FileTag::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileTag::FileTag(const FileTag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:audit.proto.FileTag)
}

void FileTag::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_blocks_ = GOOGLE_ULONGLONG(0);
  num_sectors_ = GOOGLE_ULONGLONG(0);
  sector_size_ = 0;
  hmac_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prf_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileTag::~FileTag() {
  // @@protoc_insertion_point(destructor:audit.proto.FileTag)
  SharedDtor();
}

void FileTag::SharedDtor() {
  hmac_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prf_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileTag_descriptor_;
}

const FileTag& FileTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cpor_2eproto();
  return *default_instance_;
}

FileTag* FileTag::default_instance_ = NULL;

FileTag* FileTag::New(::google::protobuf::Arena* arena) const {
  FileTag* n = new FileTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileTag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileTag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_blocks_, num_sectors_);
  sector_size_ = 0;
  hmac_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prf_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef OFFSET_OF_FIELD_
#undef ZR_

  alphas_.Clear();
}

bool FileTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audit.proto.FileTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 num_blocks = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_blocks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_sectors;
        break;
      }

      // optional uint64 num_sectors = 2;
      case 2: {
        if (tag == 16) {
         parse_num_sectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_sectors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sector_size;
        break;
      }

      // optional int32 sector_size = 3;
      case 3: {
        if (tag == 24) {
         parse_sector_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sector_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alphas;
        break;
      }

      // repeated bytes alphas = 4;
      case 4: {
        if (tag == 34) {
         parse_alphas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_alphas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alphas;
        if (input->ExpectTag(42)) goto parse_hmac_code;
        break;
      }

      // optional bytes hmac_code = 5;
      case 5: {
        if (tag == 42) {
         parse_hmac_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hmac_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_prf_key;
        break;
      }

      // optional bytes prf_key = 6;
      case 6: {
        if (tag == 50) {
         parse_prf_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prf_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_p;
        break;
      }

      // optional bytes p = 7;
      case 7: {
        if (tag == 58) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audit.proto.FileTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audit.proto.FileTag)
  return false;
#undef DO_
}

void FileTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audit.proto.FileTag)
  // optional uint64 num_blocks = 1;
  if (this->num_blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->num_blocks(), output);
  }

  // optional uint64 num_sectors = 2;
  if (this->num_sectors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_sectors(), output);
  }

  // optional int32 sector_size = 3;
  if (this->sector_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sector_size(), output);
  }

  // repeated bytes alphas = 4;
  for (int i = 0; i < this->alphas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->alphas(i), output);
  }

  // optional bytes hmac_code = 5;
  if (this->hmac_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->hmac_code(), output);
  }

  // optional bytes prf_key = 6;
  if (this->prf_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->prf_key(), output);
  }

  // optional bytes p = 7;
  if (this->p().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->p(), output);
  }

  // @@protoc_insertion_point(serialize_end:audit.proto.FileTag)
}

::google::protobuf::uint8* FileTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:audit.proto.FileTag)
  // optional uint64 num_blocks = 1;
  if (this->num_blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->num_blocks(), target);
  }

  // optional uint64 num_sectors = 2;
  if (this->num_sectors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_sectors(), target);
  }

  // optional int32 sector_size = 3;
  if (this->sector_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sector_size(), target);
  }

  // repeated bytes alphas = 4;
  for (int i = 0; i < this->alphas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->alphas(i), target);
  }

  // optional bytes hmac_code = 5;
  if (this->hmac_code().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->hmac_code(), target);
  }

  // optional bytes prf_key = 6;
  if (this->prf_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->prf_key(), target);
  }

  // optional bytes p = 7;
  if (this->p().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->p(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:audit.proto.FileTag)
  return target;
}

int FileTag::ByteSize() const {
  int total_size = 0;

  // optional uint64 num_blocks = 1;
  if (this->num_blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_blocks());
  }

  // optional uint64 num_sectors = 2;
  if (this->num_sectors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_sectors());
  }

  // optional int32 sector_size = 3;
  if (this->sector_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sector_size());
  }

  // optional bytes hmac_code = 5;
  if (this->hmac_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hmac_code());
  }

  // optional bytes prf_key = 6;
  if (this->prf_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prf_key());
  }

  // optional bytes p = 7;
  if (this->p().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->p());
  }

  // repeated bytes alphas = 4;
  total_size += 1 * this->alphas_size();
  for (int i = 0; i < this->alphas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->alphas(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileTag::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileTag::MergeFrom(const FileTag& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  alphas_.MergeFrom(from.alphas_);
  if (from.num_blocks() != 0) {
    set_num_blocks(from.num_blocks());
  }
  if (from.num_sectors() != 0) {
    set_num_sectors(from.num_sectors());
  }
  if (from.sector_size() != 0) {
    set_sector_size(from.sector_size());
  }
  if (from.hmac_code().size() > 0) {

    hmac_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmac_code_);
  }
  if (from.prf_key().size() > 0) {

    prf_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prf_key_);
  }
  if (from.p().size() > 0) {

    p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
}

void FileTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTag::CopyFrom(const FileTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTag::IsInitialized() const {

  return true;
}

void FileTag::Swap(FileTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTag::InternalSwap(FileTag* other) {
  std::swap(num_blocks_, other->num_blocks_);
  std::swap(num_sectors_, other->num_sectors_);
  std::swap(sector_size_, other->sector_size_);
  alphas_.UnsafeArenaSwap(&other->alphas_);
  hmac_code_.Swap(&other->hmac_code_);
  prf_key_.Swap(&other->prf_key_);
  p_.Swap(&other->p_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileTag_descriptor_;
  metadata.reflection = FileTag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeItem::kIndexFieldNumber;
const int ChallengeItem::kWeightFieldNumber;
#endif  // !_MSC_VER

ChallengeItem::ChallengeItem()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:audit.proto.ChallengeItem)
}

void ChallengeItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChallengeItem::ChallengeItem(const ChallengeItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:audit.proto.ChallengeItem)
}

void ChallengeItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = GOOGLE_LONGLONG(0);
  weight_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChallengeItem::~ChallengeItem() {
  // @@protoc_insertion_point(destructor:audit.proto.ChallengeItem)
  SharedDtor();
}

void ChallengeItem::SharedDtor() {
  weight_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChallengeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeItem_descriptor_;
}

const ChallengeItem& ChallengeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cpor_2eproto();
  return *default_instance_;
}

ChallengeItem* ChallengeItem::default_instance_ = NULL;

ChallengeItem* ChallengeItem::New(::google::protobuf::Arena* arena) const {
  ChallengeItem* n = new ChallengeItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeItem::Clear() {
  index_ = GOOGLE_LONGLONG(0);
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChallengeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audit.proto.ChallengeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_weight;
        break;
      }

      // optional bytes weight = 2;
      case 2: {
        if (tag == 18) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audit.proto.ChallengeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audit.proto.ChallengeItem)
  return false;
#undef DO_
}

void ChallengeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audit.proto.ChallengeItem)
  // optional int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // optional bytes weight = 2;
  if (this->weight().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:audit.proto.ChallengeItem)
}

::google::protobuf::uint8* ChallengeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:audit.proto.ChallengeItem)
  // optional int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // optional bytes weight = 2;
  if (this->weight().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:audit.proto.ChallengeItem)
  return target;
}

int ChallengeItem::ByteSize() const {
  int total_size = 0;

  // optional int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // optional bytes weight = 2;
  if (this->weight().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->weight());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChallengeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeItem::MergeFrom(const ChallengeItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.weight().size() > 0) {

    weight_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_);
  }
}

void ChallengeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeItem::CopyFrom(const ChallengeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeItem::IsInitialized() const {

  return true;
}

void ChallengeItem::Swap(ChallengeItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeItem::InternalSwap(ChallengeItem* other) {
  std::swap(index_, other->index_);
  weight_.Swap(&other->weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeItem_descriptor_;
  metadata.reflection = ChallengeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Challenge::kItemsFieldNumber;
#endif  // !_MSC_VER

Challenge::Challenge()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:audit.proto.Challenge)
}

void Challenge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Challenge::Challenge(const Challenge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:audit.proto.Challenge)
}

void Challenge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Challenge::~Challenge() {
  // @@protoc_insertion_point(destructor:audit.proto.Challenge)
  SharedDtor();
}

void Challenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Challenge_descriptor_;
}

const Challenge& Challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cpor_2eproto();
  return *default_instance_;
}

Challenge* Challenge::default_instance_ = NULL;

Challenge* Challenge::New(::google::protobuf::Arena* arena) const {
  Challenge* n = new Challenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Challenge::Clear() {
  items_.Clear();
}

bool Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audit.proto.Challenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .audit.proto.ChallengeItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audit.proto.Challenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audit.proto.Challenge)
  return false;
#undef DO_
}

void Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audit.proto.Challenge)
  // repeated .audit.proto.ChallengeItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:audit.proto.Challenge)
}

::google::protobuf::uint8* Challenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:audit.proto.Challenge)
  // repeated .audit.proto.ChallengeItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:audit.proto.Challenge)
  return target;
}

int Challenge::ByteSize() const {
  int total_size = 0;

  // repeated .audit.proto.ChallengeItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Challenge::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Challenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Challenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Challenge::MergeFrom(const Challenge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
}

void Challenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Challenge::CopyFrom(const Challenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Challenge::IsInitialized() const {

  return true;
}

void Challenge::Swap(Challenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Challenge::InternalSwap(Challenge* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Challenge_descriptor_;
  metadata.reflection = Challenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proof::kSigmaFieldNumber;
const int Proof::kMusFieldNumber;
#endif  // !_MSC_VER

Proof::Proof()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:audit.proto.Proof)
}

void Proof::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Proof::Proof(const Proof& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:audit.proto.Proof)
}

void Proof::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sigma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:audit.proto.Proof)
  SharedDtor();
}

void Proof::SharedDtor() {
  sigma_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Proof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proof_descriptor_;
}

const Proof& Proof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cpor_2eproto();
  return *default_instance_;
}

Proof* Proof::default_instance_ = NULL;

Proof* Proof::New(::google::protobuf::Arena* arena) const {
  Proof* n = new Proof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proof::Clear() {
  sigma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mus_.Clear();
}

bool Proof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audit.proto.Proof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sigma = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sigma()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mus;
        break;
      }

      // repeated bytes mus = 2;
      case 2: {
        if (tag == 18) {
         parse_mus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_mus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audit.proto.Proof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audit.proto.Proof)
  return false;
#undef DO_
}

void Proof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audit.proto.Proof)
  // optional bytes sigma = 1;
  if (this->sigma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sigma(), output);
  }

  // repeated bytes mus = 2;
  for (int i = 0; i < this->mus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->mus(i), output);
  }

  // @@protoc_insertion_point(serialize_end:audit.proto.Proof)
}

::google::protobuf::uint8* Proof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:audit.proto.Proof)
  // optional bytes sigma = 1;
  if (this->sigma().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sigma(), target);
  }

  // repeated bytes mus = 2;
  for (int i = 0; i < this->mus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->mus(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:audit.proto.Proof)
  return target;
}

int Proof::ByteSize() const {
  int total_size = 0;

  // optional bytes sigma = 1;
  if (this->sigma().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sigma());
  }

  // repeated bytes mus = 2;
  total_size += 1 * this->mus_size();
  for (int i = 0; i < this->mus_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->mus(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proof::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Proof* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proof*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proof::MergeFrom(const Proof& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mus_.MergeFrom(from.mus_);
  if (from.sigma().size() > 0) {

    sigma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sigma_);
  }
}

void Proof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proof::CopyFrom(const Proof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {

  return true;
}

void Proof::Swap(Proof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proof::InternalSwap(Proof* other) {
  sigma_.Swap(&other->sigma_);
  mus_.UnsafeArenaSwap(&other->mus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proof_descriptor_;
  metadata.reflection = Proof_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace audit

// @@protoc_insertion_point(global_scope)
